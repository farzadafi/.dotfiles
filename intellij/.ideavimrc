""" set space as leader key in vim :)
let mapleader = " "

""" =====================================================|
""" -----------------------SETTING-----------------------|
""" =====================================================|
""" allowing users to easily comment and uncomment lines of code using commands
""" like gc or gcc for commenting out selected lines or paragraphs.
set commentary

""" for which-key plugin
set which-key
set notimeout
set timeoutlen=5000

""" enables a feature that briefly highlights the text you have just yanked (copied),
""" providing a visual indication of the yanked content to help confirm the action.
set highlightedyank

""" ensures that there are always 10 lines visible above and below the cursor when scrolling.
set scrolloff=10

""" enables incremental search, allowing the cursor to move to the next match as
""" you type your search query, providing real-time feedback on search results.
set incsearch

""" enables highlighting of all matches for the last searched pattern in IdeaVim,
""" making it easier to see search results in the text.
set hlsearch

""" enables the display of absolute line numbers for each line in the editor,
""" allowing users to easily reference and navigate to specific lines in their code or text files.
set number

""" enables relative line numbering, where the current line is displayed as 0,
""" and all other lines are numbered based on their distance from the current line
set relativenumber

""" enables the display of the current Vim mode (such as normal, insert, or visual)
""" at the bottom of the editor, helping users to identify which mode they are currently in.
set showmode

""" displays partially typed commands in the status line at the bottom of the screen.
set showcmd

""" enables case-insensitive searching in IdeaVim, but if the search pattern
""" contains any uppercase letters, it switches to case-sensitive searching.
set smartcase

""" use the system clipboard for all yank (copy) and paste operations,
""" allowing you to copy text from IdeaVim directly to the system clipboard
""" and paste it into other applications.
set clipboard+=unnamed
set clipboard+=unnamedplus

""" ----> setting specific for Idea
""" enable a feature in IdeaVim that enhances the way lines are
""" joined together in JetBrains IDEs
set ideajoin

""" determines the mode that is used when a refactoring action selects text.
""" By default, this mode is set to "select," which means that when you initiate a refactoring,
""" the editor will switch to select mode, allowing you to modify the selected text directly.
idearefactormode=keep

""" =====================================================|
""" -------------------SETTING HANDLER-------------------|
""" =====================================================|
""" sethandler: This command allows you to specify how shortcuts are handled by IdeaVim.
""" C = Ctrl key
""" n-v-i:vim=normal, visual and insert mode

""" this typically moves to the next item in the jump list.
sethandler <C-i> n-v-i:vim

""" This command is used to jump to the previous position in the jump list.
sethandler <C-o> n-v-i:vim

""" Used for scrolling down half a page in Vim.
sethandler <C-d> n-v-i:vim

""" This command scrolls up half a page in Vim.
sethandler <C-u> n-v-i:vim

""" =====================================================|
""" ------------------------MAPPING----------------------|
""" =====================================================|
nmap <leader>p :action SelectInProjectView<CR>
nmap <leader>g :action FindInPath<CR>
nmap <leader>d :action Debug<CR>
nmap <leader>r :action RenameElement<CR>


""" =====================================================|
""" --------- NON_RECURSIVE MAPPING IN NORMAL MODE ------|
""" =====================================================|
""" allows you to remove the inner word under the cursor while discarding
""" the deleted text instead of saving it to the clipboard.
nnoremap ciw "_ciw

""" like ciw, but remove any space after word too :)
nnoremap caw "_caw

""" allows you to change the entire line where the cursor is located
""" while discarding the deleted text instead of saving it to the clipboard.
nnoremap C "_C

""" allows you to remove the current line (or the text selected by the cc command)
""" without affecting the clipboard.
nnoremap cc "_cc

""" This allows you to copy just the text from the cursor's position to the
""" end of that line without adding a new line when pasting.
nnoremap Y y$

""" When you delete something using "_d, it effectively deletes the text without saving
""" it to any register. This means that whatever text is deleted will not be available for pasting later.
nnoremap d "_d

""" When you delete something using "_D, it effectively deletes the text without saving
""" it to any register. This means that whatever text is deleted will not be available for pasting later.
nnoremap D "_D

""" When you delete text using this register, it does not save the deleted content to any of the regular
""" registers (like the unnamed register). Therefore, anything deleted with this command cannot be pasted back later.
nnoremap dd "_dd

""" When you press Alt + p, this mapping effectively deletes the word under the cursor without saving it
""" to any register and then pastes whatever was last copied or cut (if any) at that position.
""" If there was no previous text copied or cut, nothing will be pasted, as the black hole register
"""does not retain deleted content.
nnoremap <a-p> "_diwP

nnoremap m :tabnext<CR>
nnoremap M :tabp<CR>

""" Move current line up. a=alt
nnoremap <a-k> :m .-2<CR>
""" Move current line down.
nnoremap <a-j> :m .+1<CR>
""" Delete word
nnoremap <a-d> "_diw
""" change word -> delete word and go to insert mode
nnoremap <a-c> "_ciw
""" change inside quotes(assuming double quotes)
nnoremap <a-z> "_ci"
""" change inside parentheses.
nnoremap <a-x> "_ci(

""" visual all of method's
nnoremap vam j:action MethodUp<cr>0v]M
""" visual inner of method's
nnoremap vim j:action MethodUp<cr>]m<cr>v]M<bs>
""" delete all of method's
nnoremap dam j:action MethodUp<cr>0v]M"_d
""" delete inner of method's
nnoremap dim j:action MethodUp<cr>]m<cr>v]M<bs>"_d
""" yank all of method's
nnoremap yam j:action MethodUp<cr>0v]My
""" yank inner of method's
nnoremap yim j:action MethodUp<cr>]m<cr>v]M<bs>y
""" change all of method's
nnoremap cam j:action MethodUp<cr>0v]M"_c
""" change inner of method's
nnoremap cim j:action MethodUp<cr>]m<cr>v]M<bs>"_c

""" Move to the beginning of the line.
nnoremap H ^
""" Move to the end of the line.
nnoremap L $
""" like w but for camel case
map W [w
""" like b but for camel case
map B [b
""" like e but for camel case
map E ]w
""" Repeat search forward and center the cursor.
nnoremap n nzz
""" Repeat search backward and center the cursor.
nnoremap N Nzz

nnoremap <C-o> :action Back<cr>
nnoremap <C-i> :action Forward<cr>

""" Window navigation
""" Move to the left window in a split
nnoremap <c-h> <c-w>h
""" Move to the down window in a split
nnoremap <c-j> <c-w>j
""" Move to the upper window in a split
nnoremap <c-k> <c-w>k
""" Move to the right window in a split
nnoremap <c-l> <c-w>l
nnoremap <a-w> :action CloseAllEditorsButActive<cr>
nnoremap <a-q> :action CloseContent<cr>
nnoremap <a-t> :action NewScratchFile<cr>
nnoremap <leader>wv :action SplitVertically<cr>
nnoremap <leader>ws :action SplitHorizontally<cr>
nnoremap <leader>wc :action Unsplit<cr>
nnoremap <leader>wp :action MoveEditorToOppositeTabGroup<cr>
nnoremap <Leader>wn :action EditSourceInNewWindow<cr>

" Find (leader f)
nnoremap ;; :nohlsearch<cr>
map <leader>fe :action GotoClass<cr>
map <leader>fn :action GotoFile<cr>
map <leader>fp :action ManageRecentProjects<cr>
map <leader>fa :action GotoAction<cr>
map <leader>fg :action FindInPath<cr>
map <leader>fh :action RecentFiles<cr>
map <leader>fm :action RecentLocations<cr>
map <leader>fs :action GotoSymbol<cr>
map <leader>fd :action Find<cr>
map <leader>fr :action Replace<cr>
map <leader>fR :action ReplaceInPath<cr>
map <leader>fx :action PasteMultiple<cr>
map <leader>ft :action ActivateTODOToolWindow<cr>

" Views (leader v)
map <leader>o :action ActivateProjectToolWindow<cr>
map <leader>vp :action ActivateProblemsViewToolWindow<cr>
map <leader>vs :action ActivateStructureToolWindow<cr>
map <leader>vt :action ActivateTerminalToolWindow<cr>
map <leader>vt :action ActivateTerminalToolWindow<cr>
map <leader>vv :action ActivateServicesToolWindow<cr>
map <leader>vd :action ActivateDebugToolWindow<cr>
map <leader>vg :action ActivateVersionControlToolWindow<cr>
map <leader>vo :action ActivateTODOToolWindow<cr>
map <leader>vc :action ActivateGitHubCopilotChatToolWindow<cr>
map <leader>vq :action CloseActiveTab<cr>

" Debug (leader d)
nnoremap <leader>de :action Debug<cr>
nnoremap <leader>dE :action ChooseDebugConfiguration<cr>
nnoremap <leader>dr :action Run<cr>
nnoremap <leader>dR :action ChooseRunConfiguration<cr>
nnoremap <leader>dk :action Stop<cr>
nnoremap <leader>db :action ToggleLineBreakpoint<cr>
nnoremap <leader>dm :action XDebugger.MuteBreakpoints<cr>
nnoremap <leader>dd :action Debugger.RemoveAllBreakpoints<cr>
nnoremap <leader>ds :action ViewBreakpoints<cr>
nnoremap <leader>dv :action StepOver<cr>
nnoremap <leader>di :action StepInto<cr>e
nnoremap <leader>do :action StepOut<cr>
nnoremap <leader>dc :action Resume<cr>
map <leader>dx :action QuickEvaluateExpression<cr>
map <leader>dt :action EvaluateExpression<cr>
map <leader>dw :action Debugger.AddToWatch<cr>

" Code navigation (leader c)
nnoremap <leader>cd :action GotoDeclaration<cr>
nnoremap <leader>ct :action GotoTypeDeclaration<cr>
nnoremap <leader>ci :action GotoImplementation<cr>
nnoremap <leader>cs :action GotoSuperMethod<cr>
nnoremap <leader>cr :action ShowUsages<cr>
nnoremap <leader>cu :action HighlightUsagesInFile<cr>
nnoremap <leader>cv :action QuickJavaDoc<cr>
nnoremap <leader>ch :action CallHierarchy<CR>
nnoremap <Leader>cc  :bd<CR>
nnoremap <leader>cn :action ShowNavBar<CR>
nnoremap <leader>cx :action FileStructurePopup<CR>
nnoremap <leader>cb :action CompileDirty<CR>
nnoremap <leader>cp :action ParameterInfo<CR>
nnoremap <leader>ck :action QuickImplementations<CR>